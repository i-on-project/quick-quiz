{"version":3,"sources":["Services/FetchService.js","Components/UserContextProvider.js","Components/LogMeIn.js","Components/HomeComponent.js","Components/RegisterUser.js","Components/LoginUser.js","Components/NavBarComponent.js","Components/Templates/TemplateForm.js","Components/Templates/Templates.js","Components/Sessions/SessionCard.js","Services/LocationService.js","Components/Sessions/SessionForm.js","Components/Sessions/CreateSessionModal.js","Services/SirenService.js","Components/Sessions/Sessions.js","Components/Quizzes/CreateEditQuizModal.js","Components/Quizzes/QuizCard.js","Components/Sessions/Session.js","Services/RequestService.js","Services/CancellableFetch.js","Components/History/HistoryQuiz.js","Components/History/HistoryDetails.js","Components/History/HistoryPage.js","Components/Quizzes/QuizAnswerModal.js","Components/Quizzes/QuizAnswerCardInSession.js","Components/Sessions/InSessionComponent.js","Components/Quizzes/QuizCardInSession.js","Components/Sessions/InSessionOrg.js","App.js","reportWebVitals.js","index.js","Data/SessionModel.js"],"names":["goPOST","address","submitData","setData","setError","method","setLoading","fetch","headers","body","JSON","stringify","then","response","ok","json","text","Error","actualData","catch","err","jerror","parse","message","finally","undefined","goDEL","status","console","log","goGET","func","appUser","userName","displayName","isLoading","inSession","updateUser","UserContext","React","createContext","UserContextProvider","children","useState","context","setContext","updateContext","contextUpdates","currentContext","getCookie","cname","name","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","useEffect","answerCookie","checkCookie","data","properties","error","user","display","Provider","value","LogMeIn","useSearchParams","searchParams","userContext","useContext","tempUser","token","get","postData","loginToken","to","Container","Row","Card","Body","Text","href","HomeComponent","session","setSession","goToParticipantSession","setGoToParticipantSession","participantId","Title","InputGroup","className","id","FormControl","placeholder","onChange","event","target","Button","type","onClick","sessionCode","RegisterUser","setUserName","setDisplayName","setDataForUrl","fData","host","window","location","LoginUser","NavBarComponent","logout","setLogout","isLoggedIn","isNotLoggedIn","Navbar","bg","expand","Brand","TemplateForm","onSubmit","alert","preventDefault","setState","Templates","SessionCard","props","setStatus","setInSession","style","width","Form","Select","e","newStatus","reloadSessions","startHref","closeHref","updateStatus","variant","openSession","link","deleteSession","options","enableHighAccuracy","timeout","maximumAge","getCurrentLocation","success","navigator","geolocation","getCurrentPosition","SessionForm","validPropsData","setName","description","setDescription","creationDate","limitOfParticipants","setLimitOfParticipants","setGeolocation","radius","setRadius","edit","setEdit","create","setCreate","validated","setValidated","updateSession","noValidate","form","currentTarget","checkValidity","stopPropagation","updatedSession","createSession","createUpdateSession","Label","d","Date","setSeconds","getDate","toLocaleString","getCreatedDate","required","disabled","min","pos","crd","coords","latitude","longitude","accuracy","warn","code","CreateSessionModal","handleClose","newSession","Modal","Header","closeButton","defaultValue","Footer","getActionHref","actions","action","find","a","getLinksHref","links","relName","title","rel","includes","getLinksFromEntity","entity","l","Sessions","sessions","setSessions","sessionId","setSessionId","loading","setNewSession","page","setPage","totalPages","setTotalPages","sessionCreated","setSessionCreated","getSessions","nPages","Math","floor","total","entities","apiLink","getEntityLinksHref","handleCLose","newButton","Spinner","animation","map","show","curr","reducer","state","rightAnswer","payload","CreateEditQuizModal","validData","validChoices","answerChoices","answerType","setType","question","setQuestion","newAnsOptions","setNewAnsOptions","order","setOrder","setRightAnswer","useReducer","choiceRight","choiceNumber","fixOptions","right","tmp","choices","questionType","getNewOrEdited","updateQuiz","createQuiz","Group","choiceAnswer","temp","index","handleAnswerChanges","Radio","checked","onRightAnsChange","r","splice","handleRemoval","QuizCard","setShow","dataForEdit","setDataForEdit","quizState","handleClick","removeQuiz","quizHref","reloadQuizzes","ListGroup","horizontal","Item","toUpdate","handleModalChanges","quiz","Session","quizzes","setQuizzes","setTitle","useParams","getQuizzes","t","sort","b","compareOrder","newQuiz","q","request","uri","opts","aux","controller","AbortController","signal","abort","ready","cancellableFetch","aborted","reason","HistoryQuiz","content","item","stats","Array","fill","answers","forEach","ans","choice","idx","color","ProgressBar","now","answer","HistoryDetails","open","setOpen","occurredTime","historyDate","liveDate","hours","minutes","seconds","button","collapse","prevState","Collapse","in","fields","elem","numberOfParticipants","String","padStart","History","history","setHistory","role","QuizAnswerModal","hasAnswer","setAnswer","answerNumber","answerChoice","setAnswerChoice","quizId","saveAnswer","FormLabel","MultiChoiceView","as","rows","readOnly","QuizAnswerCardInSession","FloatingLabel","guestId","answerId","messageOrganizer","InSession","client","setClient","wsSourceUrl","setWsSourceUrl","sendMessageToOrganizer","getQuizAnswer","sendMessage","url","topics","onConnect","onDisconnect","onMessage","msg","ref","QuizCardInSession","showAns","setShowAns","getMultiChoiceView","sendMessageToParticipants","sa","InSessionOrg","setAnswers","numberParticipants","setNumberParticipants","guestCode","setGuestCode","getAnswers","getQuizAnswers","aw","push","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","module","exports","SessionDTO","templateId","this"],"mappings":"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","file":"static/js/main.8d136117.chunk.js","sourcesContent":["\r\nexport const goPOST = (address, submitData, setData, setError, method = 'POST', setLoading) => {\r\n\r\n    fetch(address, {\r\n        method: method,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(submitData)\r\n    })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                return response.text().then(text => { throw new Error(text) })\r\n            }\r\n            else\r\n            return response.json();\r\n        })\r\n        .then((actualData) => {\r\n            if(setData)\r\n                setData(actualData)\r\n\r\n        })\r\n        .catch((err) => {\r\n            if(setError) {\r\n                const jerror = JSON.parse(err.message)\r\n                if(jerror)\r\n                    setError(jerror)\r\n                else\r\n                    setError(err.message)\r\n            }\r\n\r\n        })\r\n        .finally(() => {\r\n            if(setLoading !== undefined && setLoading !== null)\r\n                setLoading(false);\r\n        });\r\n};\r\n\r\nexport const goDEL = (address, setData, setError, setLoading) => {\r\n\r\n    fetch(address, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                throw new Error(\r\n                    `This is an HTTP error: The status is ${response.status}`\r\n                );\r\n            }\r\n            return response.json();\r\n        })\r\n        .then((actualData) => {\r\n            if(setData)\r\n                setData(actualData)\r\n            console.log(`I'm in fetch data`)\r\n        })\r\n        .catch((err) => {\r\n            if(setError)\r\n                setError(err.message)\r\n            console.log(`I'm in fetch error in catch ${err.message}`)\r\n        })\r\n        .finally(() => {\r\n            if(setLoading !== undefined && setLoading !== null)\r\n                setLoading(false);\r\n        });\r\n};\r\n\r\nexport const goGET = (address, setData, setError, setLoading) => {\r\n\r\n    fetch(address, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                throw new Error(\r\n                    `This is an HTTP error: The status is ${response.status}`\r\n                );\r\n            }\r\n            return response.json();\r\n        })\r\n        .then((actualData) => {\r\n            if(setData)\r\n                setData(actualData)\r\n\r\n        })\r\n        .catch((err) => {\r\n            if(setError)\r\n                setError(err.message)\r\n\r\n        })\r\n        .finally(() => {\r\n            if(setLoading !== undefined && setLoading !== null)\r\n                setLoading(false);\r\n        });\r\n};\r\n\r\n\r\n\r\n","import React, {Fragment, useEffect, useState} from 'react';\r\nimport {goPOST, goGET} from \"../Services/FetchService\";\r\n\r\nconst func = () => {\r\n}\r\n\r\nconst appUser = {\r\n    userName: null,\r\n    displayName: null,\r\n    isLoading: false,\r\n    inSession: null,\r\n    updateUser: func,\r\n}\r\n\r\nexport const UserContext = React.createContext(appUser)\r\n\r\nexport const UserContextProvider = ({children}) => {\r\n    const [context, setContext] = useState(appUser)\r\n\r\n    const updateContext = (contextUpdates = {}) => {\r\n        setContext(currentContext => ({...currentContext, ...contextUpdates}))\r\n    }\r\n    const checkCookie = () => {\r\n        const answerCookie = getCookie('InSession')\r\n        console.log(`Answer Cookie: ${answerCookie}`)\r\n        if (answerCookie !== null) {\r\n\r\n            updateContext({\r\n                inSession: answerCookie\r\n            })\r\n        }\r\n    }\r\n//https://www.w3schools.com/js/js_cookies.asp\r\n    const getCookie = (cname) => {\r\n        let name = cname + \"=\";\r\n        let decodedCookie = decodeURIComponent(document.cookie);\r\n        let ca = decodedCookie.split(';');\r\n        for (let i = 0; i < ca.length; i++) {\r\n            let c = ca[i];\r\n            while (c.charAt(0) == ' ') {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) == 0) {\r\n                return c.substring(name.length, c.length);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (appUser.userName === null) {\r\n            const setData = (data) => {\r\n                if (data !== null) {\r\n                    updateContext({\r\n                        userName: data.properties.userName,\r\n                        displayName: data.properties.displayName,\r\n                        isLoading: false\r\n                    })\r\n                }\r\n            }\r\n            updateContext({isLoading: true})\r\n            const setError = (error) => {\r\n                //console.log(`I'm Error Fetched in COntext: ${error}`)\r\n                updateContext({isLoading: false})\r\n            }\r\n            checkCookie()\r\n            goGET(\"/api/web/v1.0/auth/checkuser\", setData, setError)\r\n        }\r\n\r\n    }, [appUser.userName])\r\n\r\n    useEffect(() => {\r\n        if (context.updateUser === func) {\r\n            updateContext({\r\n                updateUser: (user, display) => updateContext({userName: user, displayName: display}),\r\n            })\r\n        }\r\n    }, [context.updateUser])\r\n\r\n    return (\r\n        <UserContext.Provider value={context}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    )\r\n}\r\n\r\n","import React, {useState, useEffect, useContext} from 'react'\r\nimport {goPOST} from \"../Services/FetchService\";\r\nimport {Card, Container, Row} from \"react-bootstrap\";\r\nimport {Navigate, useSearchParams} from \"react-router-dom\";\r\nimport {UserContext} from \"./UserContextProvider\";\r\n\r\n\r\nexport const LogMeIn = () => {\r\n    const [searchParams] = useSearchParams() //read query parameters from URI\r\n\r\n    /*Data from Success or InSuccess credentials validation*/\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    /*Context User*/\r\n    const userContext = useContext(UserContext)\r\n    const tempUser = {\r\n        userName: null,\r\n        displayName: null,\r\n        token: null\r\n    }\r\n\r\n    /*********************************************************************************/\r\n    useEffect(() => {\r\n        /*Assign query values*/\r\n        tempUser.userName = searchParams.get(\"user\")\r\n        tempUser.token = searchParams.get(\"token\")\r\n\r\n\r\n        if(!data) {\r\n            console.log(`useEffect 2: ${tempUser.userName}`)\r\n            const postData = {userName: tempUser.userName, loginToken: tempUser.token}\r\n            goPOST(`/api/web/v1.0/non_auth/logmein`, postData, setData, setError)\r\n        }\r\n\r\n    }, [tempUser.userName,tempUser.token, data])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            tempUser.displayName = data.properties.displayName\r\n            userContext.updateUser(tempUser.userName, tempUser.displayName)\r\n        }\r\n    }, [data, userContext, tempUser.userName, tempUser.displayName])\r\n\r\n    return (<div>\r\n            {data && (<Navigate to={\"/\"}/>)}\r\n            {error && (<Container>\r\n                    <Row>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Card.Text>\r\n                                    <h3>The link used seems to have expired. Please request new a new <a\r\n                                        href=\"/login\">Login</a> and try again.</h3>\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Row>\r\n                </Container>)}\r\n        </div>\r\n\r\n    );\r\n}\r\n","import {Card, Container, FormControl, InputGroup, Row} from \"react-bootstrap\";\r\nimport React, {Fragment, useEffect, useState, useContext} from 'react'\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {goPOST} from \"../Services/FetchService\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nimport {UserContext} from \"./UserContextProvider\";\r\n\r\n\r\nexport const HomeComponent = () => {\r\n\r\n    const userContext = useContext(UserContext)\r\n\r\n    const [error, setError] = useState(null);\r\n    const [session, setSession] = useState(null);\r\n    const [goToParticipantSession, setGoToParticipantSession] = useState(false)\r\n\r\n    const sessionhangeHandler = (event) => {\r\n        setSession(event.target.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log('How is context?')\r\n        console.log(userContext.userName)\r\n        console.log(userContext.displayName)\r\n    }, [])\r\n\r\n    function joinSessionAction () {\r\n        const postData = {sessionCode: session}\r\n        const setMeSession = (data) => {\r\n            setSession(data)\r\n            console.log(data)\r\n            setGoToParticipantSession(true)\r\n        }\r\n        goPOST(`/api/web/v1.0/non_auth/join_session`, postData, setMeSession, setError)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {goToParticipantSession && <Navigate to={`insession/${session.participantId}`} /> }\r\n            <Container>\r\n                <Row>\r\n                    <Card>\r\n\r\n                        <Card.Body>\r\n                            <Card.Title>Join a Quiz Session</Card.Title>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <InputGroup.Text id=\"sessioncode\"/>\r\n                                <FormControl\r\n                                    placeholder=\"Session Code\"\r\n                                    aria-label=\"Session\"\r\n                                    aria-describedby=\"basic-addon1\"\r\n                                    onChange={sessionhangeHandler}\r\n                                />\r\n                            </InputGroup>\r\n                            <Button className=\"btn btn-success\" type=\"submit\"\r\n                                    onClick={joinSessionAction}> Save\r\n                            </Button>\r\n\r\n                            {error && (\r\n                                <div>{`There is a problem joining the session - ${error}`}</div>\r\n                            )}\r\n                            {/*{data && (\r\n\r\n                                <div>{`GuestId: ${data.id}`}</div>\r\n                            )}\r\n\r\n                            {data && (\r\n\r\n                                <div>{`SessionId: ${data.sessionId}`}</div>\r\n                            )}\r\n\r\n                            {data && (<InSession props={data} /> )}*/}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Row>\r\n\r\n            </Container>\r\n        </Fragment>\r\n    );\r\n}","import React, {useState} from 'react'\r\nimport {goPOST} from \"../Services/FetchService\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Card, Container, FormControl, InputGroup, Row} from \"react-bootstrap\";\r\n\r\nexport const RegisterUser = () => {\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const [userName, setUserName] = useState(null);\r\n    const [displayName, setDisplayName] = useState(null)\r\n\r\n    const userNameChangeHandler = (event) => {\r\n        setUserName(event.target.value);\r\n    };\r\n\r\n    const displayNameChangeHandler = (event) => {\r\n        setDisplayName(event.target.value);\r\n    };\r\n    const setDataForUrl = (fData) => {\r\n        fData.properties.host = window.location.host;\r\n        setData(fData);\r\n    }\r\n\r\n    const toggleButtonState = () => {\r\n        const postData = {userName: userName, displayName: displayName}\r\n        console.log(postData)\r\n        goPOST(`/api/web/v1.0/non_auth/register`, postData, setDataForUrl, setError)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Container>\r\n                <Row>\r\n                    <Card>\r\n\r\n                        <Card.Body>\r\n                            <Card.Title>Quick Quiz Register Test</Card.Title>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <InputGroup.Text id=\"username\"/>\r\n                                <FormControl\r\n                                    placeholder=\"Username\"\r\n                                    aria-label=\"Username\"\r\n                                    aria-describedby=\"basic-addon1\"\r\n                                    onChange={userNameChangeHandler}\r\n                                />\r\n                            </InputGroup>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <InputGroup.Text id=\"displayname\"/>\r\n                                <FormControl\r\n                                    placeholder=\"Display Name\"\r\n                                    aria-label=\"Display Name\"\r\n                                    aria-describedby=\"basic-addon1\"\r\n                                    onChange={displayNameChangeHandler}\r\n                                />\r\n                            </InputGroup>\r\n\r\n\r\n                            <Button className=\"btn btn-success\" type=\"submit\"\r\n                                    onClick={toggleButtonState}> Save\r\n                            </Button>\r\n                            {/*                                <button className=\"btn btn-danger\"\r\n                                        onClick={this.cancel.bind(this)}\r\n                                        style={{marginLeft: \"10px\"}}>Cancel\r\n                                </button>*/}\r\n\r\n                            <Card>\r\n\r\n                                <Card.Body>\r\n                                    {error && (\r\n                                        <div>{`There is a problem fetching the post data - ${error}`}</div>\r\n                                    )}\r\n\r\n                                    {data && (\r\n                                        <div>{data.userName}</div>)}\r\n\r\n                                    {data && (\r\n                                        <a href={`http://${data.properties.host}/logmein?user=${data.properties.userName}&token=${data.properties.token}`}> LogMeIn </a>)}\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Row>\r\n\r\n            </Container>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react'\r\nimport {goPOST} from \"../Services/FetchService\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Card, Container, FormControl, InputGroup, Row} from \"react-bootstrap\";\r\n\r\nexport const LoginUser = () => {\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [userName, setUserName] = useState(null);\r\n\r\n\r\n    const userNameChangeHandler = (event) => {\r\n        setUserName(event.target.value);\r\n    };\r\n\r\n    const setDataForUrl = (fData) => {\r\n        fData.properties.host = window.location.host;\r\n        setData(fData);\r\n    }\r\n\r\n    const toggleButtonState = () => {\r\n        const postData = {userName: userName}\r\n        console.log(postData)\r\n        goPOST(`/api/web/v1.0/non_auth/login`, postData, setDataForUrl, setError)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Row>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Card.Title>Login</Card.Title>\r\n                            <InputGroup className=\"mb-3\">\r\n                                <InputGroup.Text id=\"username\"/>\r\n                                <FormControl\r\n                                    placeholder=\"Username\"\r\n                                    aria-label=\"Username\"\r\n                                    aria-describedby=\"basic-addon1\"\r\n                                    onChange={userNameChangeHandler}\r\n                                />\r\n                            </InputGroup>\r\n\r\n                            <Button className=\"btn btn-success\" type=\"submit\"\r\n                                    onClick={toggleButtonState}> Save\r\n                            </Button>\r\n\r\n                        </Card.Body>\r\n                    </Card>\r\n\r\n                </Row>\r\n                <Row>\r\n                    {data || error ?  (\r\n                        <Card>\r\n                            <Card.Body>\r\n                                {error && (\r\n                                    <div>{`There is a problem fetching the post data - ${error}`}</div>\r\n                                )}\r\n\r\n                                {data && (\r\n                                    <div>{data.properties.userName}</div>\r\n                                )}\r\n                                {data && (\r\n                                    <div>{data.properties.token}</div>\r\n                                )}\r\n\r\n                                {data && (\r\n                                    <a href={`http://${data.properties.host}/logmein?user=${data.properties.userName}&token=${data.properties.token}`}> LogMeIn </a>)}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    ) : <div/>}\r\n                </Row>\r\n\r\n            </Container>\r\n        </div>\r\n    );\r\n}","import React, {Fragment, useContext, useEffect, useState} from 'react'\r\nimport {Container, Navbar} from \"react-bootstrap\";\r\nimport {Navigate, Link} from \"react-router-dom\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {goPOST} from \"../Services/FetchService\";\r\n\r\nimport {UserContext} from \"./UserContextProvider\";\r\n\r\nexport const NavBarComponent = () => {\r\n\r\n    const userContext = useContext(UserContext)\r\n    const [logout, setLogout] = useState(false)\r\n\r\n    const logoutHandler = () => {\r\n        goPOST('/api/web/v1.0/auth/logout',null, null, null)\r\n        userContext.updateUser(null, null)\r\n        setLogout(true)\r\n    }\r\n\r\n    const isLoggedIn = () => userContext.userName !== null && userContext.isLoading === false\r\n    const isNotLoggedIn = () => userContext.userName === null && userContext.isLoading === false\r\n\r\n    return (\r\n        <Fragment>\r\n            {logout && <Navigate to={\"/\"} />}\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Container>\r\n                    <Navbar.Text><Link to=\"/\">Home</Link></Navbar.Text>\r\n                    {isLoggedIn() ? <Navbar.Brand href=\"/sessions\">Sessions</Navbar.Brand> : null}\r\n                    {isLoggedIn() ? <Navbar.Brand href=\"/templates\">Templates</Navbar.Brand> : null}\r\n                    {isLoggedIn() ? <Navbar.Brand href=\"/history\">History</Navbar.Brand> : null}\r\n                    {isLoggedIn() ? <Navbar.Text>Welcome {userContext.displayName}</Navbar.Text>   : null}\r\n                    {isLoggedIn() ? <Button className=\"btn btn-success\" type=\"submit\"\r\n                                                    onClick={logoutHandler}> Logout\r\n                    </Button> : null}\r\n                    {isNotLoggedIn() ? <Navbar.Brand href=\"/register\">Register</Navbar.Brand> : null}\r\n                    {isNotLoggedIn() ? <Navbar.Brand href=\"/login\">Login</Navbar.Brand> : null}\r\n\r\n                </Container>\r\n            </Navbar>\r\n            {userContext.inSession !== null && <Navigate to={`/insession/${userContext.inSession}`}/>}\r\n\r\n        </Fragment>\r\n    );\r\n}","import React, {useState} from 'react'\r\n\r\nexport const TemplateForm = () => {\r\n\r\n    const [value, setValue] = useState('Test')\r\n\r\n    const handleChange = (event) => {\r\n        this.setState(event.target.value);\r\n    }\r\n    const handleSubmit = (event) => {\r\n        alert('A name was submitted: ' + value);\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    Name:\r\n                    <input type=\"text\" value={value} onChange={handleChange}/>\r\n                </label>\r\n                <input type=\"submit\" value=\"Submit\"/>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Container} from \"react-bootstrap\";\r\nimport {TemplateForm} from \"./TemplateForm\";\r\n\r\nexport const Templates = () => {\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <h1>Form Should be below</h1>\r\n                <TemplateForm/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {Card, Form} from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport React, {Fragment, useState} from \"react\";\r\nimport {goPOST} from \"../../Services/FetchService\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const SessionCard = (props) => {\r\n\r\n    const [status, setStatus] = useState(props.status)\r\n    const [inSession, setInSession] = useState(false)\r\n\r\n    const handleOpenClick = () => {\r\n        if (status !== 'STARTED')\r\n            props.openSession(props.name, props.link)\r\n        else\r\n            setInSession(true)\r\n\r\n    }\r\n    const handleDeleteClick = () => {\r\n        if (status !== 'STARTED')\r\n            props.deleteSession(props.name, props.link)\r\n\r\n    }\r\n\r\n\r\n    const updateStatus = (newStatus) => {\r\n        setStatus(newStatus)\r\n\r\n        const setError = (error) => {\r\n\r\n            console.log(error)\r\n            if(error.type === 'LiveSessionAlreadyExists') {\r\n                alert('Another Session is already Live. Please close that session before starting a new one.')\r\n                setStatus('NOT_STARTED')\r\n            } else {\r\n                alert('An error occurred. PLease try again and if the error persists contact your administrator.')\r\n            }\r\n\r\n        }\r\n\r\n        const setData = (data) => {\r\n            console.log(`status Updated to ${newStatus}, response: ${data} -> Navigate somewhere`)\r\n            if (newStatus === 'STARTED') {\r\n                setInSession(true)\r\n            } else {\r\n                props.reloadSessions()\r\n            }\r\n\r\n        }\r\n\r\n        if (newStatus === 'STARTED')\r\n            goPOST(props.startHref, '', setData, setError)\r\n        else if (newStatus === 'CLOSED')\r\n            goPOST(props.closeHref, '', setData, setError)\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {inSession && (<Navigate to={`/owninsession/${props.id}`}/>)}\r\n            <Card style={{width: '18rem'}} className=\"me-3 mb-3\">\r\n                <Card.Body>\r\n                    <Card.Title>{props.name}</Card.Title>\r\n                    <Form.Select value={status}\r\n                                 onChange={(e) => updateStatus(e.target.value)}>\r\n                        {status === 'NOT_STARTED' && <option value='NOT_STARTED'>Not Started</option>}\r\n                        {status !== 'CLOSED' && <option value='STARTED'>Started</option>}\r\n                        {status !== 'NOT_STARTED' && <option value='CLOSED'>Closed</option>}\r\n                    </Form.Select>\r\n                    <Button variant=\"primary\" onClick={handleOpenClick} className=\"mt-3\">Open</Button>\r\n                    {status !== 'STARTED' &&\r\n                        <Button variant=\"primary\" onClick={handleDeleteClick} className=\"ms-3 mt-3\">Delete</Button>}\r\n                </Card.Body>\r\n            </Card>\r\n        </Fragment>\r\n    )\r\n}","\r\nconst options = {\r\n    enableHighAccuracy: true,\r\n    timeout: 5000,\r\n    maximumAge: 0\r\n};\r\n\r\n\r\nexport const getCurrentLocation = (success, error) => navigator.geolocation.getCurrentPosition(success, error, options);\r\n","import {Form, FormControl, InputGroup} from \"react-bootstrap\";\r\nimport React, {useReducer, useState} from \"react\";\r\nimport {useEffect} from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {getCurrentLocation} from \"../../Services/LocationService\";\r\n\r\n/*\r\nconst initialState = {\r\n    name: '',\r\n    status: [],\r\n    description: '',\r\n    guestCode: 1,\r\n    limitOfParticipants: 1,\r\n    useGeo: false,\r\n    geolocation: '',\r\n    radius: 50\r\n};\r\n*/\r\n\r\nexport const SessionForm = (props) => {\r\n    const validPropsData = () => props.session !== undefined && props.session !== null\r\n\r\n    const [name, setName] = useState(validPropsData() ? props.session.name : '')\r\n    const [status, setStatus] = useState(validPropsData() ? props.session.status : '')\r\n    const [description, setDescription] = useState(validPropsData() ? props.session.description : '')\r\n    const [creationDate] = useState(validPropsData() ? props.session.creationDate : '')\r\n\r\n    const [limitOfParticipants, setLimitOfParticipants] = useState(validPropsData() ? props.session.limitOfParticipants : '')\r\n    const [geolocation, setGeolocation] = useState(validPropsData() ? props.session.geolocation : '')\r\n    const [radius, setRadius] = useState(validPropsData() && props.session.radius > 50 ? props.session.radius : 50)\r\n\r\n    const [edit, setEdit] = useState(false)\r\n    const [create, setCreate] = useState(false)\r\n    const [validated, setValidated] = useState(false)\r\n\r\n    /*    const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n        const reducer = (state, action) => {\r\n            switch (action.type) {\r\n                case 'set-mode': {\r\n                    return state;\r\n                }\r\n                case 'set-images': {\r\n                    return state;\r\n                }\r\n                case 'set-query': {\r\n                    return state;\r\n                }\r\n                case 'fetch-next-page': {\r\n                    return state;\r\n                }\r\n                case 'reset': {\r\n                    return initialState;\r\n                }\r\n                default:\r\n                    return initialState;\r\n            }\r\n        };*/\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.updateSession === null || props.updateSession === undefined) {\r\n            setEdit(true)\r\n            setCreate(true)\r\n        } else setCreate(false)\r\n    }, [props])\r\n\r\n\r\n    const createUpdateSession = () => {\r\n        const updatedSession = {\r\n            name: name, description: description, limitOfParticipants: limitOfParticipants, geolocation: geolocation, radius: radius\r\n        }\r\n        if (props.updateSession !== undefined && props.updateSession !== null) props.updateSession(updatedSession)\r\n        else props.createSession(updatedSession)\r\n    }\r\n\r\n\r\n    const editButton = () => (<Button className=\"btn btn-success left\"\r\n                                      onClick={() => setEdit(true)}> Edit\r\n    </Button>)\r\n\r\n    const cancelEditButton = () => (<Button className=\"btn btn-success me-3\"\r\n                                            onClick={() => setEdit(false)}> Cancel\r\n    </Button>)\r\n\r\n    const saveButton = () => (<Button className=\"btn btn-success left\" type=\"submit\"> {!create ? \"Update\" : \"Create\"}\r\n    </Button>)\r\n\r\n    const getCreatedDate = () => {\r\n        const d = new Date(0)\r\n        d.setSeconds(creationDate)\r\n        return d.getDate().toLocaleString()\r\n    }\r\n\r\n    const updateLocation = () => {\r\n        const success = (pos) => {\r\n            const crd = pos.coords;\r\n\r\n            console.log('Your current position is:');\r\n            console.log(`Latitude : ${crd.latitude}`);\r\n            console.log(`Longitude: ${crd.longitude}`);\r\n            console.log(`More or less ${crd.accuracy} meters.`);\r\n            setGeolocation(`${crd.latitude},${crd.longitude},${crd.accuracy}`)\r\n        }\r\n\r\n        const error = (err) => {\r\n            console.warn(`ERROR(${err.code}): ${err.message}`);\r\n        }\r\n\r\n        getCurrentLocation(success, error)\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n        event.preventDefault();\r\n        setValidated(true)\r\n        if (form.checkValidity() === false) {\r\n            event.stopPropagation();\r\n        } else {\r\n            createUpdateSession()\r\n            setEdit(false)\r\n            setValidated(false)\r\n        }\r\n\r\n    };\r\n\r\n    return (<Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n\r\n        {!create && <div><Form.Label>Created on {getCreatedDate()}</Form.Label></div>}\r\n        <Form.Label className={\"mb-2 mt-3\"}>Session Name:</Form.Label>\r\n        <InputGroup>\r\n            <FormControl\r\n                required\r\n                placeholder=\"Session Name\"\r\n                aria-label=\"Session Name\"\r\n                aria-describedby=\"session_name\"\r\n                disabled={!edit}\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n            />\r\n        </InputGroup>\r\n        <Form.Label className={\"mb-2 mt-3\"}>Session Description:</Form.Label>\r\n        <InputGroup>\r\n            <FormControl\r\n                placeholder=\"Session description\"\r\n                aria-label=\"Session description\"\r\n                aria-describedby=\"session_description\"\r\n                disabled={!edit}\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n            />\r\n        </InputGroup>\r\n        <Form.Label className={\"mb-2 mt-3\"}>Session Status:</Form.Label>\r\n        <Form.Select value={status}\r\n                     onChange={(e) => setStatus(e.target.value)}\r\n                     disabled={!edit}>\r\n            <option value='NOT_STARTED'>Not Started</option>\r\n            <option value='STARTED'>Started</option>\r\n            <option value='CLOSED'>Closed</option>\r\n        </Form.Select>\r\n\r\n        <Form.Label className={\"mb-2 mt-3\"}>Limit Of Participants:</Form.Label>\r\n        <InputGroup>\r\n            <FormControl\r\n                required\r\n                min={10}\r\n                placeholder=\"Limit Of Participants\"\r\n                type=\"number\"\r\n                aria-label=\"Limit Of Participants:\"\r\n                aria-describedby=\"limit_participants\"\r\n                disabled={!edit}\r\n                value={limitOfParticipants}\r\n                onChange={(e) => setLimitOfParticipants(e.target.value)}\r\n            />\r\n        </InputGroup>\r\n\r\n        <Form.Label className={\"mb-2 mt-3\"}>Geolocation:</Form.Label>\r\n        <InputGroup className=\"mb-3\">\r\n            <FormControl\r\n                key={\"geo_location\"}\r\n                type=\"text\"\r\n                placeholder=\"Add Geolocation (optional)\"\r\n                value={geolocation}\r\n                disabled={!edit}\r\n                onChange={(e) => setGeolocation(e.target.value)}\r\n            />\r\n            {edit && <Button variant=\"outline-secondary\" id=\"button-addon2\" onClick={updateLocation}>\r\n                Update location\r\n            </Button>}\r\n        </InputGroup>\r\n\r\n        {geolocation !== null && geolocation !== '' && (<Form.Label className={\"mb-2 mt-3\"}>Radius (meters):</Form.Label>)}\r\n\r\n        {geolocation !== null && geolocation !== '' && (\r\n            <InputGroup className=\"mb-3\">\r\n                <FormControl\r\n                    required={geolocation !== null && geolocation !== ''}\r\n                    min={50}\r\n                    key={\"geo_radius\"}\r\n                    type=\"number\"\r\n                    placeholder=\"Add Radius (min 50m)\"\r\n                    value={radius}\r\n                    disabled={!edit}\r\n                    onChange={(e) => setRadius(e.target.value)}\r\n                />\r\n            </InputGroup>\r\n        )}\r\n\r\n        {!edit && !create && editButton()}\r\n        {edit && !create && cancelEditButton()}\r\n        {edit && !create && saveButton()}\r\n    </Form>)\r\n}","import {SessionForm} from \"./SessionForm\";\r\nimport {Button, Form, FormControl, InputGroup, Modal} from \"react-bootstrap\";\r\nimport React, {useState, Fragment} from \"react\";\r\nimport {getCurrentLocation} from \"../../Services/LocationService\";\r\n\r\n\r\nexport const CreateSessionModal = ((props) => {\r\n    const validPropsData = () => props.session !== undefined && props.session !== null\r\n\r\n    const [name, setName] = useState(validPropsData() ? props.session.name : '')\r\n    const [description, setDescription] = useState(validPropsData() ? props.session.description : '')\r\n    const [limitOfParticipants, setLimitOfParticipants] = useState(validPropsData() ? props.session.limitOfParticipants : '')\r\n    const [geolocation, setGeolocation] = useState(validPropsData() ? props.session.geolocation : '')\r\n    const [radius, setRadius] = useState(validPropsData() ? props.session.radius : '')\r\n    const [useGeo, setUseGeo] = useState(false)\r\n    const [validated, setValidated] = useState(false);\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        event.preventDefault();\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.stopPropagation();\r\n        } else {\r\n            const newSession = {\r\n                name: name,\r\n                description: description,\r\n                limitOfParticipants: limitOfParticipants,\r\n                geolocation: geolocation,\r\n                radius: radius\r\n            }\r\n            if (props.createSession != null) {\r\n                props.createSession(newSession)\r\n            }\r\n        }\r\n        setValidated(true);\r\n    };\r\n\r\n    const updateLocation = () => {\r\n        const success = (pos) => {\r\n            const crd = pos.coords;\r\n            setGeolocation(`${crd.latitude},${crd.longitude},${crd.accuracy}`)\r\n        }\r\n\r\n        const error = (err) => {\r\n            console.warn(`ERROR(${err.code}): ${err.message}`);\r\n        }\r\n\r\n        getCurrentLocation(success, error)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        if (props.handleClose != null) {\r\n            props.handleClose()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                <Modal.Header closeButton onClick={handleClose}>\r\n                    <Modal.Title>Quiz Session</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form.Label>Session Name:</Form.Label>\r\n                    <InputGroup>\r\n                        <FormControl\r\n                            required\r\n                            placeholder=\"Session Name\"\r\n                            aria-label=\"Session Name\"\r\n                            aria-describedby=\"session_name\"\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        />\r\n                    </InputGroup>\r\n                    <Form.Label>Session Description:</Form.Label>\r\n                    <InputGroup>\r\n                        <FormControl\r\n                            required\r\n                            placeholder=\"Session description\"\r\n                            aria-label=\"Session description\"\r\n                            aria-describedby=\"session_description\"\r\n                            value={description}\r\n                            onChange={(e) => setDescription(e.target.value)}\r\n                        />\r\n                    </InputGroup>\r\n                    <Form.Label>Limit Of Participants:</Form.Label>\r\n                    <InputGroup>\r\n                        <FormControl\r\n                            placeholder=\"Limit Of Participants\"\r\n                            type=\"number\"\r\n                            aria-label=\"Limit Of Participants:\"\r\n                            aria-describedby=\"limit_participants\"\r\n                            defaultValue=\"10\"\r\n                            value={limitOfParticipants}\r\n                            onChange={(e) => setLimitOfParticipants(e.target.value)}\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    <Form.Label className={\"mb-2 mt-3\"}>Geolocation:</Form.Label>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl\r\n                            key={\"geo_location\"}\r\n                            type=\"text\"\r\n                            placeholder=\"Add Geolocation (optional)\"\r\n                            value={geolocation}\r\n\r\n                            onChange={(e) => setGeolocation(e.target.value)}\r\n                        />\r\n                        <Button variant=\"outline-secondary\" id=\"button-addon2\" onClick={updateLocation}>\r\n                            Update location\r\n                        </Button>\r\n                    </InputGroup>\r\n\r\n                    {geolocation !== null && geolocation !== '' && (\r\n                        <Form.Label className={\"mb-2 mt-3\"}>Radius (meters):</Form.Label>)}\r\n\r\n                    {geolocation !== null && geolocation !== '' && (\r\n                        <InputGroup className=\"mb-3\">\r\n                            <FormControl\r\n                                required={geolocation !== null && geolocation !== ''}\r\n                                min={50}\r\n                                key={\"geo_radius\"}\r\n                                type=\"number\"\r\n                                placeholder=\"Add Radius (min 50m)\"\r\n                                value={radius}\r\n                                onChange={(e) => setRadius(e.target.value)}\r\n                            />\r\n                        </InputGroup>\r\n                    )}\r\n\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n                    <Button variant=\"primary\" type=\"submit\">Save changes</Button>\r\n                </Modal.Footer>\r\n            </Form>\r\n        </Fragment>\r\n    )\r\n\r\n})","export const getActionHref = (actions, name) => {\r\n    const action = actions.find(a => a.name === name)\r\n    if (action)\r\n        return action.href\r\n    else\r\n        return null\r\n}\r\n\r\nexport const getLinksHref = (links, relName, title) => {\r\n    const link = links.find(a => a.rel.includes(relName) && a.title === title)\r\n    if (link)\r\n        return link.href\r\n    else\r\n        return null\r\n}\r\n\r\n\r\nexport const getLinksFromEntity = (entity, relName) => {\r\n    const link = entity.links.find(l => l.rel.includes(\"self\") && l.rel.includes(relName))\r\n\r\n    if (link)\r\n        return link.href\r\n    else\r\n        return null\r\n}\r\n\r\nexport const getEntityLinksHref = (entities, id, relName) => {\r\n    const entity = entities.find(e => e.properties.id === id)\r\n    if (entity) {\r\n        return getLinksFromEntity(entity, relName)\r\n    }\r\n    return null\r\n}\r\n\r\n","import React, {Fragment, useEffect, useState} from \"react\";\r\nimport {Container, Modal, Row, Spinner} from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {SessionCard} from \"./SessionCard\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {goDEL, goGET, goPOST} from \"../../Services/FetchService\";\r\nimport {CreateSessionModal} from \"./CreateSessionModal\";\r\nimport {getActionHref, getEntityLinksHref, getLinksFromEntity} from \"../../Services/SirenService\";\r\n\r\n\r\nexport const Sessions = () => {\r\n\r\n    const [sessions, setSessions] = useState(null)\r\n    const [sessionId, setSessionId] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n    const [inSession, setInSession] = useState(false)\r\n    const [newSession, setNewSession] = useState(false)\r\n    const [page, setPage] = useState(0)\r\n    const [totalPages, setTotalPages] = useState(-1)\r\n    const [sessionCreated, setSessionCreated] = useState(null)\r\n\r\n\r\n    const getSessions = () => {\r\n\r\n        const setError = (error) => {\r\n            alert(`Failed to update Session from ${`/api/web/v1.0/auth/sessions?page=${page === -1 ? 0 : page}`} with error ${error}`)\r\n        }\r\n\r\n        const setData = (data) => {\r\n            setSessions(data)\r\n            const nPages = Math.floor(data.properties.total / 10)\r\n            setTotalPages(nPages === 0 ? 1 : nPages)\r\n        }\r\n\r\n        goGET(`/api/web/v1.0/auth/sessions?page=${page === -1 ? 0 : page}`, setData, setError, setLoading)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        setLoading(true)\r\n        getSessions()\r\n\r\n    }, [page])\r\n\r\n\r\n    const createSession = (newSession) => {\r\n        setLoading(true)\r\n        const setData = (data) => {\r\n            handleCLose()\r\n            console.log(data)\r\n            setSessionCreated(data.properties)\r\n            setSessionId(data.properties.id)\r\n        }\r\n\r\n        const setError = (error) => {\r\n            if (error !== null)\r\n                alert('Session was not created and Error received: ' + error)\r\n        }\r\n\r\n        const apiLink = getActionHref(sessions.actions, \"Create-Session\")\r\n\r\n        if(apiLink !== null)\r\n            goPOST(apiLink, newSession, setData, setError, 'POST', setLoading)\r\n        else {\r\n            setError(\"Missing Action!\")\r\n            setLoading(true)\r\n        }\r\n\r\n    }\r\n\r\n    //const goToSession = (id) => <Redirect to={`\\/${id}`} />\r\n/*    const openSession = (name, link) => {\r\n        setLoading(true)\r\n        //console.log(`name: ${name} -> link: ${link}`)\r\n        const setError = (error) => {\r\n            if (error !== null)\r\n                alert(`Failed to retrieve Session from ${link} with error ${error}`)\r\n        }\r\n        getSession(link, setSession, setError)\r\n\r\n        setInSession(true)\r\n        setLoading(false)\r\n    }*/\r\n\r\n    const openSession = (id) => {\r\n        setInSession(true)\r\n        setSessionId(id)\r\n    }\r\n\r\n    const deleteSession = (id) => {\r\n        setLoading(true)\r\n        const setData = (data) => {\r\n            console.log(data)\r\n            getSessions()\r\n\r\n        }\r\n\r\n        const setError = (error) => {\r\n            if (error !== null)\r\n                alert('Session was not Deleted and Error received: ' + error)\r\n        }\r\n\r\n        console.log(sessions.entities)\r\n        const apiLink = getEntityLinksHref(sessions.entities, id, \"delete\")\r\n\r\n        if (apiLink !== null)\r\n            goDEL(apiLink, setData, setError, setLoading)\r\n\r\n    }\r\n\r\n    const handleCLose = () => setNewSession(false)\r\n\r\n\r\n    const newButton = () => (\r\n        <Button className=\"btn btn-success\" type=\"submit\" className=\"mb-3\"\r\n                onClick={() => setNewSession(true)}> New Session\r\n        </Button>\r\n    )\r\n\r\n    const handleNext = () => {\r\n        if (page >= totalPages) setPage(0)\r\n        else setPage((curr) => curr + 1)\r\n    }\r\n\r\n    const handlePrev = () => {\r\n        if (page <= 0) setPage(totalPages)\r\n        else setPage((curr) => curr - 1)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {sessionId !== null && <Navigate to={`./${sessionId}`} session={sessionCreated}/>}\r\n            <Container>\r\n                <Row>\r\n                    <h1>Sessions</h1>\r\n                </Row>\r\n                {loading === false && inSession === false && (newButton())}\r\n                {/*{loading === false && inSession === true && session !== null && (backButton())}*/}\r\n\r\n            </Container>\r\n            <Container>\r\n                <Row>\r\n                    {loading === true && (<Spinner animation=\"grow\"/>)}\r\n                    {loading === false && inSession === false && sessions !== null && sessions.entities.map(e =>\r\n                        <SessionCard key={e.properties.name} /*TODO: use some other thing*/\r\n                                     name={e.properties.name}\r\n                                     link={e.href}\r\n                                     id={e.properties.id}\r\n                                     status={e.properties.status}\r\n                                     startHref = {getLinksFromEntity(e, \"start\")}\r\n                                     closeHref = {getLinksFromEntity(e, \"close\")}\r\n                                     openSession={() => openSession(e.properties.id)}\r\n                                     deleteSession={() => deleteSession(e.properties.id)}\r\n                                     reloadSessions={() => getSessions()}\r\n                        />)\r\n                    }\r\n                    {loading === false && inSession === true && inSession === true && (\r\n                        <Navigate to={`/sessions/${sessionId}`}/>)}\r\n                    {/*  {loading === false && inSession === true && session !== null && (\r\n                        <Session session={session} quizLink={session.links[0]}/>)}*/}\r\n                    {loading === false && (\r\n                        <Modal show={newSession}>\r\n                            <CreateSessionModal createSession={createSession} handleClose={handleCLose}/>)\r\n                        </Modal>)}\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Container>\r\n                        <Button variant=\"primary\" onClick={handlePrev}>Prev</Button>\r\n                        <Button variant=\"primary\" onClick={handleNext}>Next</Button>\r\n                    </Container>\r\n                </Row>\r\n            </Container>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n","import React, {Fragment, useEffect, useReducer, useState} from \"react\";\r\nimport {Button, Form, Dropdown, FormControl, InputGroup, Modal, Col, Row} from \"react-bootstrap\";\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'set':\r\n            state.data.rightAnswer = action.payload.rightAnswer\r\n            return action.payload.rightAnswer\r\n        case 'increment':\r\n            return state.data.rightAnswer += 1\r\n        case 'decrement':\r\n            return state.data.rightAnswer -= 1;\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n\r\n\r\nexport const CreateEditQuizModal = ((props) => {\r\n\r\n        const validData = () => props.data !== undefined && props.data !== null\r\n        const validChoices = () => validData() && props.data.answerChoices !== undefined && props.data.answerChoices !== null && props.data.answerType === 'MULTIPLE_CHOICE'\r\n        const emptyChoices = [{\"choiceAnswer\": \"\"}, {\"choiceAnswer\": \"\"}]\r\n\r\n        const [type, setType] = useState(validData() ? props.data.answerType : 'SHORT')\r\n        const [question, setQuestion] = useState(validData() ? props.data.question : '')\r\n        const [newAnsOptions, setNewAnsOptions] = useState(validChoices() ? [...props.data.answerChoices] : emptyChoices)\r\n        const [validated, setValidated] = useState(false);\r\n        const [order, setOrder] = useState(validData() ? props.data.order : 0)\r\n        const [rightAnswer, setRightAnswer] = useState(-1)\r\n        const [state, dispatch] = useReducer(reducer,  {\r\n            loading: false,\r\n            data: {rightAnswer: 0},\r\n            error: undefined\r\n        });\r\n\r\n        const handleClose = () => props.handleClose()\r\n\r\n        useEffect(() => {\r\n            if (validChoices())\r\n                setRightAnswer(props.data.answerChoices.find(a => a.choiceRight === true).choiceNumber)\r\n        }, [props.data])\r\n\r\n        const onTypeChange = (e) => {\r\n            setType(e.target.value)\r\n        }\r\n\r\n        const onQuestionUpdate = (e) => {\r\n            setQuestion(e.target.value)\r\n        }\r\n\r\n        const fixOptions = (right) => {\r\n            if(type !== 'MULTIPLE_CHOICE') return null\r\n\r\n            const tmp = newAnsOptions.map((e, i) => (\r\n                {...e, choiceNumber: i, choiceRight: i === right}\r\n            ))\r\n            return tmp\r\n        }\r\n\r\n        const onRightAnsChange = (index) => {\r\n            setRightAnswer(index)\r\n            const tmp = fixOptions(index)\r\n            setNewAnsOptions([...tmp])\r\n        }\r\n\r\n        const getNewOrEdited = () => {\r\n            const tmp = fixOptions(rightAnswer)\r\n            //setNewAnsOptions([...newAnsOptions, ...tmp])\r\n            return !validData() ? {\r\n                question: question,\r\n                questionType: type,\r\n                order: order,\r\n                choices: tmp\r\n            } : {\r\n                question: question,\r\n                order: order,\r\n                choices: tmp\r\n            }\r\n        }\r\n\r\n        const handleAdd = () => {\r\n            setNewAnsOptions([...newAnsOptions, {\"choiceAnswer\": \"\"}])\r\n        }\r\n\r\n        const handleRemoval = (index) => {\r\n            if (index === (rightAnswer)) {\r\n                alert('This answer cannot be removed because its configured as the right answer!')\r\n                return\r\n            }\r\n\r\n            let tmp = []\r\n            if (rightAnswer > index) {\r\n                setRightAnswer(r => r - 1)\r\n                tmp = fixOptions(rightAnswer)\r\n            }\r\n            else\r\n                tmp = [...newAnsOptions]\r\n            console.log(tmp)\r\n            tmp.splice(index, 1)\r\n            setNewAnsOptions([...tmp])\r\n        }\r\n\r\n        const handleAnswerChanges = (e, i) => {\r\n            const temp = newAnsOptions.map((a, index) => index === i ? {\"choiceAnswer\": e.target.value} : a)\r\n            setNewAnsOptions([...temp])\r\n        }\r\n\r\n\r\n        const newChoices = () => (\r\n            newAnsOptions.map((a, i) =>\r\n                (\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl\r\n                            required\r\n                            key={\"q_\" + i}\r\n                            type=\"text\"\r\n                            placeholder=\"Possible answer\"\r\n                            value={a.choiceAnswer}\r\n                            onChange={(e) => handleAnswerChanges(e, i)}\r\n                        />\r\n                        <InputGroup.Radio name=\"correct\"\r\n                                          checked={a.choiceRight}\r\n                                          onChange={() => onRightAnsChange(i)}/>\r\n                        {newAnsOptions.length > 2 &&\r\n                            <Button variant=\"outline-secondary\" id=\"button-addon2\" onClick={() => handleRemoval(i)}>\r\n                                Remove\r\n                            </Button>}\r\n                    </InputGroup>\r\n                )\r\n            )\r\n        )\r\n\r\n        const handleSubmit = (event) => {\r\n            const form = event.currentTarget;\r\n            //event.preventDefault();\r\n            if (form.checkValidity() === false) {\r\n                event.stopPropagation();\r\n            } else {\r\n                const tmp = getNewOrEdited()\r\n                //console.log(tmp)\r\n                validData() ? props.updateQuiz(props.data.id, tmp) : props.createQuiz(tmp)\r\n            }\r\n            event.preventDefault();\r\n            setValidated(true)\r\n        };\r\n\r\n\r\n        return (\r\n            <Fragment>\r\n                <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <Modal.Header closeButton onClick={handleClose}>\r\n                        <Modal.Title>QUIZ</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Answer Type:</Form.Label>\r\n                            <Form.Select value={type} onChange={onTypeChange} disabled={validData()}>\r\n                                <option value='SHORT'>Short</option>\r\n                                <option value='LONG'>Long</option>\r\n                                <option value='MULTIPLE_CHOICE'>Multi-Choice</option>\r\n                            </Form.Select>\r\n                            <Form.Label>Order in session:</Form.Label>\r\n                            <InputGroup>\r\n                                <FormControl\r\n                                    key={\"order_number\"}\r\n                                    placeholder=\"Order Number?\"\r\n                                    aria-label=\"Order in session\"\r\n                                    aria-describedby=\"order\"\r\n                                    type=\"number\"\r\n                                    value={order}\r\n                                    onChange={(e) => setOrder(e.target.value)}\r\n                                />\r\n                            </InputGroup>\r\n                            <Form.Label>Question:</Form.Label>\r\n                            <InputGroup>\r\n                                <FormControl\r\n                                    key={\"question_input\"}\r\n                                    placeholder=\"Question?\"\r\n                                    aria-label=\"A Question\"\r\n                                    aria-describedby=\"question\"\r\n                                    value={question}\r\n                                    onChange={onQuestionUpdate}\r\n                                />\r\n                            </InputGroup>\r\n\r\n                            {type === 'MULTIPLE_CHOICE' && <Form.Label>Possible Answers:</Form.Label>}\r\n                            {type === 'MULTIPLE_CHOICE' && newChoices()}\r\n\r\n                        </Form.Group>\r\n\r\n                        {type === 'MULTIPLE_CHOICE' && (<Button variant=\"primary\" onClick={handleAdd}>Add</Button>)}\r\n\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n                        <Button variant=\"primary\" type=\"submit\">Save</Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Fragment>\r\n        )\r\n    }\r\n)","import {Form, ListGroup, Modal} from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport React, {Fragment, useState} from \"react\";\r\nimport {CreateEditQuizModal} from \"./CreateEditQuizModal\";\r\nimport {goDEL, goPOST} from \"../../Services/FetchService\";\r\n\r\n\r\nexport const QuizCard = (props) => {\r\n    const [show, setShow] = useState(false)\r\n    const [dataForEdit, setDataForEdit] = useState(null)\r\n    const [status, setStatus] = useState(props.data.quizState)\r\n    const [shoAns, setShowAns] = useState(false)\r\n\r\n    const handleClick = () => {\r\n        /*props.openSession(props.name, props.link)*/\r\n        console.log(`Data in Quiz Card: ${props.data}`)\r\n        setDataForEdit(props.data)\r\n        setShow(true)\r\n    }\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        setDataForEdit(null)\r\n    }\r\n\r\n    const updateQuizHandler = (id, quiz) => {\r\n\r\n        const setError = (error) => error !== null ? console.log(`Error Updating Quiz: ${id} with error ${error} `) : null\r\n        const setData = (data) => {\r\n            handleClose()\r\n            props.reloadQuizzes()\r\n        }\r\n        goPOST(props.quizHref, quiz, setData, setError, 'PUT')\r\n    }\r\n\r\n    const removeQuiz = (id) => {\r\n        const setError = (error) => {\r\n            console.log(`Error Deleting Quiz: ${id} with error ${error} `)\r\n        }\r\n        const setData = (data) => {\r\n            console.log(`Deleted Quiz ${id} Successfully!! Response: ${data}`)\r\n            props.reloadQuizzes()\r\n        }\r\n        console.log(`Quiz Self: ${props.quizHref}`)\r\n        goDEL(props.quizHref, setData, setError)\r\n    }\r\n\r\n    const updateStatus = (newStatus) => {\r\n\r\n        const toUpdate = {\r\n            quizState: newStatus,\r\n        }\r\n        const setError = (error) => {\r\n            if (error !== null) console.log(`Error Updating Quiz: ${props.data.id} with error ${error} `)\r\n        }\r\n        const setData = (data) => {\r\n            if (data !== null) {\r\n                console.log(`Updated Quiz ${props.data.id} Successfully!! Response: ${data}`)\r\n                setStatus(newStatus)\r\n            }\r\n        }\r\n        goPOST(`${props.quizHref}/updatestatus`, toUpdate, setData, setError, 'PUT')\r\n    }\r\n\r\n    return (<Fragment>\r\n        {/*{['md'].map((breakpoint) => (*/}\r\n\r\n        <ListGroup horizontal>\r\n            <ListGroup.Item className=\"col-4\">{props.data.question}</ListGroup.Item>\r\n            <ListGroup.Item className=\"col-3\">{props.data.answerType}</ListGroup.Item>\r\n            <ListGroup.Item className=\"col-1\">{props.data.order}</ListGroup.Item>\r\n            <ListGroup.Item className=\"col-2\">\r\n                <Form.Select value={status}\r\n                             onChange={(e) => updateStatus(e.target.value)}>\r\n                    <option value='NOT_STARTED'>Not Started</option>\r\n                    <option value='STARTED'>Started</option>\r\n                    <option value='CLOSED'>Closed</option>\r\n                </Form.Select>\r\n            </ListGroup.Item>\r\n            {status === 'NOT_STARTED' &&\r\n                <ListGroup.Item>\r\n                    <Button variant=\"primary\" onClick={handleClick}>\r\n                        Edit\r\n                    </Button>\r\n                </ListGroup.Item>}\r\n            {status === 'NOT_STARTED' && <ListGroup.Item>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={() => removeQuiz(props.data.id)}>\r\n                    Remove\r\n                </Button>\r\n            </ListGroup.Item>\r\n            }\r\n            {status !== 'NOT_STARTED' && <ListGroup.Item>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={() => removeQuiz(props.data.id)}>\r\n                    Answers\r\n                </Button>\r\n            </ListGroup.Item>\r\n            }\r\n        </ListGroup>\r\n\r\n        <Modal show={show}>\r\n            <CreateEditQuizModal data={dataForEdit}\r\n                                 handleClose={handleClose}\r\n                                 handleModalChanges={handleClick}\r\n                                 updateQuiz={updateQuizHandler}/>\r\n        </Modal>\r\n    </Fragment>)\r\n}","import React, {useEffect, useState, Fragment} from \"react\";\r\nimport {Card, Container, Form, FormControl, FormLabel, InputGroup, Modal, Row} from \"react-bootstrap\";\r\nimport {EditableInput} from \"../UtilComponents/EditableInput\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {goGET, goPOST} from \"../../Services/FetchService\";\r\nimport {SessionCard} from \"./SessionCard\";\r\nimport {QuizCard} from \"../Quizzes/QuizCard\";\r\nimport {CreateEditQuizModal} from \"../Quizzes/CreateEditQuizModal\";\r\nimport {getSession} from \"../../Services/SessionService\";\r\nimport {useParams} from \"react-router\";\r\nimport {SessionForm} from \"./SessionForm\";\r\nimport {getActionHref, getEntityLinksHref, getLinksHref} from \"../../Services/SirenService\";\r\n\r\nexport const Session = (props) => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [session, setSession] = useState(null)\r\n    const [quizzes, setQuizzes] = useState(null)\r\n    const [quizzesLinks, setQuizzesLinks] = useState(null)\r\n    const [show, setShow] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const [title, setTitle] = useState('')\r\n    const {id} = useParams()\r\n\r\n    useEffect(() => {\r\n        /*Prevent reset state*/\r\n        const setSessionError = (error) => {\r\n            if (error !== null) {\r\n                console.log(`Failed to get session with ID: ${id} with error ${error}`)\r\n                setError(error)\r\n            }\r\n        }\r\n        const getMeSession = (data) => {\r\n            setSession(data)\r\n        }\r\n\r\n        goGET(`/api/web/v1.0/auth/sessions/${id}`, getMeSession, setSessionError)\r\n\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        if (session !== null) {\r\n            setTitle(session.properties.name)\r\n            getQuizzes()\r\n        }\r\n    }, [session])\r\n\r\n    const getQuizzes = () => {\r\n        const setError = (error) => {\r\n            if (error !== null)\r\n                alert(`Failed to retrieve Session from ${getLinksHref(session.links, \"related\")} with error ${error}`)\r\n        }\r\n\r\n        const compareOrder = (a, b) => {\r\n            if (a < b) return -1\r\n            if (a > b) return 1\r\n            return 0\r\n        }\r\n\r\n        const setData = (data) => {\r\n            if (data) {\r\n                const quizList = data.entities.map(e => e)\r\n                const t = quizList.sort((a, b) => compareOrder(a.properties.order, b.properties.order))\r\n                setQuizzes(t)\r\n            }\r\n        }\r\n        goGET(getLinksHref(session.links, \"related\",'Quizzes'), setData, setError)\r\n    }\r\n\r\n\r\n\r\n    const newQuiz = () => {\r\n        setShow(true)\r\n    }\r\n    const handleClose = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const newButton = () => (\r\n        <Button className=\"btn btn-success left\" type=\"submit\"\r\n                onClick={newQuiz}> Add Quiz\r\n        </Button>\r\n    )\r\n\r\n    const createQuizHandler = (quiz) => {\r\n        const setError = (error) => error !== null ? console.log(`Error Creating with error ${error} `) : null\r\n        const setData = (data) => {\r\n            console.log(`Created Quiz Successfully!! Response: ${data}`)\r\n            handleClose()\r\n            getQuizzes()\r\n        }\r\n        const apiLink = session.actions.find(a => a.name === 'Add-Quiz').href\r\n        goPOST(apiLink, quiz, setData, setError)\r\n\r\n    }\r\n\r\n    const updateSessionHandler = (updatedSession) => {\r\n        setLoading(true)\r\n        const setError = (error) => {\r\n            if (error !== null)\r\n                alert(`Failed to update Session from ${updatedSession} with error ${error}`)\r\n        }\r\n\r\n        const apiLink = getActionHref(session.actions, 'Update-Session')\r\n        //const method = session.actions.find(a => a.name === 'Update-Session').method //TODO: getMethod\r\n\r\n        goPOST(apiLink, updatedSession, null, setError, 'PUT', setLoading)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Container>\r\n                <Row>\r\n                    <Card>\r\n                        <Card.Body>\r\n\r\n                            <Card.Title>{title}</Card.Title>\r\n                            {session !== null && (\r\n                                <SessionForm session={session.properties} updateSession={updateSessionHandler}/>)}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Row>\r\n            </Container>\r\n            {/******************** if there are quizzes *********************************/}\r\n            <Container>\r\n                <Row>\r\n                    {quizzes !== null && quizzes.length > 0 && (\r\n                        quizzes.map(q => <QuizCard key={q.properties.id}\r\n                                                   name={q.properties.question}\r\n                                                   data={q.properties}\r\n                                                   quizHref={q.href}\r\n                                                   reloadQuizzes={getQuizzes}\r\n                        />)\r\n                    )}\r\n                </Row>\r\n            </Container>\r\n            <Container>\r\n                <Row>\r\n                    {newButton()}\r\n                </Row>\r\n            </Container>\r\n            <Modal show={show}>\r\n                <CreateEditQuizModal handleClose={handleClose} createQuiz={createQuizHandler}/>\r\n            </Modal>\r\n        </Fragment>\r\n    )\r\n\r\n}","import { cancellableFetch } from \"./CancellableFetch\"\r\n\r\nconst parse = (response, setData, setError) => {\r\n    response.body.then((data) => {\r\n\r\n        if(response.signal.aborted) return\r\n\r\n        if(response.ok) setData(data)\r\n        else setError(data)\r\n    })\r\n}\r\n\r\nconst request = (uri, opts, setData, setError) => {\r\n    const aux = cancellableFetch(uri, opts)\r\n    aux.ready.then((response) => {\r\n        parse({ok: response.ok, body: response.json(), signal: aux.signal}, setData, setError)\r\n    }).catch((reason) => console.log(\"On catch:\" + reason))\r\n    return aux.abort\r\n}\r\n\r\nexport const get = (uri, setData, setError) => request(uri, {method: 'GET'}, setData, setError)\r\nexport const post = (uri, body, setData, setError) => request(uri, {method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(body)}, setData, setError)\r\nexport const put = (uri, body, setData, setError) => request(uri, {method: 'PUT', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(body)}, setData, setError)\r\nexport const del = (uri, setData, setError) => request(uri, {method: 'DELETE'}, setData, setError)","/*\r\nhttps://davidwalsh.name/cancel-fetch\r\n*/\r\n\r\nexport const cancellableFetch = (request, opts) => {\r\n    const controller = new AbortController();\r\n    const signal = controller.signal;\r\n  \r\n    return {\r\n      abort: () => controller.abort(),\r\n      ready: fetch(request, { ...opts, signal }),\r\n      signal: signal\r\n    };\r\n}","import { Fragment } from \"react\";\r\nimport { Card, ListGroup, ProgressBar, Row } from \"react-bootstrap\";\r\n\r\nexport const HistoryQuiz = (props) => {\r\n    \r\n    let content = <p>No answers</p>\r\n\r\n    if(props.item.answerType === \"MULTIPLE_CHOICE\") {\r\n        const stats = new Array(props.item.answerChoices.length).fill(0);\r\n        props.item.answers.forEach((ans) => stats[ans.choiceNumber] += 1)\r\n\r\n        content = props.item.answerChoices.map((choice, idx) => {\r\n            let color = \"danger\"\r\n            if(choice.choiceRight) color = \"success\"\r\n            \r\n            return <ListGroup variant=\"flush\"><ListGroup.Item key={idx}>\r\n                <div className={\"bg-light d-flex justify-content-between\"}><p>{choice.choiceAnswer}</p><p>{stats[choice.choiceNumber] + ' of ' + props.item.answers.length}</p></div>\r\n                <ProgressBar variant={color} now={(stats[choice.choiceNumber] / props.item.answers.length) * 100}/>    \r\n            </ListGroup.Item></ListGroup>\r\n        })\r\n    }\r\n\r\n    if(props.item.answerType === \"SHORT\" || props.item.answerType === \"LONG\") {\r\n        content = <ListGroup variant=\"flush\">{props.item.answers.map((ans, idx) => <ListGroup.Item key={idx}>{ans.answer}</ListGroup.Item>)}</ListGroup>\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card>\r\n                <Card.Header>Question</Card.Header>\r\n                <Card.Body>{props.item.question}</Card.Body>\r\n            </Card>\r\n            <Card>\r\n                <Card.Header>Answers</Card.Header>\r\n                <Card.Body>{content}</Card.Body>\r\n            </Card>\r\n        </Fragment>\r\n    )\r\n}","import { Fragment, useState } from \"react\";\r\nimport { ListGroup, Button, Collapse } from \"react-bootstrap\"\r\nimport { HistoryQuiz } from \"./HistoryQuiz\";\r\n\r\nconst HistoryDetails = (props) => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    let occurredTime =  props.item.properties.historyDate - props.item.properties.liveDate\r\n    const hours = Math.floor(occurredTime / 3600);\r\n    occurredTime %= 3600;\r\n    const minutes = Math.floor(occurredTime / 60);\r\n    const seconds = occurredTime % 60;\r\n\r\n    let button = null;\r\n    let collapse = null;\r\n\r\n    if(props.item.properties.quizzes != null && props.item.properties.quizzes.length !== 0) {\r\n        button = <Button onClick={() => setOpen((prevState) => !prevState)} aria-controls=\"collapse-quizzes\" aria-expanded={open}>quizzes</Button> \r\n        collapse = <Collapse in={open}><div id=\"collapse-quizzes\">{props.item.properties.quizzes.map((quiz) => <HistoryQuiz key={props.item.fields.find((elem) => elem.name === 'id').value} item={quiz}/>)}</div></Collapse>\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <ListGroup horizontal>\r\n                <ListGroup.Item className={\"col-3\"} key={0}>{props.item.properties.name}</ListGroup.Item>\r\n                <ListGroup.Item className={\"col-6\"} key={1}>{props.item.properties.description}</ListGroup.Item>\r\n                <ListGroup.Item className={\"col-1\"} key={2}>{props.item.properties.numberOfParticipants} of {props.item.properties.limitOfParticipants}</ListGroup.Item>\r\n                <ListGroup.Item className={\"col-1\"} key={3}>{String(hours).padStart(2, '0')}:{String(minutes).padStart(2, '0')}:{String(seconds).padStart(2, '0')}</ListGroup.Item>\r\n                {button}\r\n            </ListGroup>\r\n            {collapse}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default HistoryDetails","import { Fragment, useEffect, useState } from \"react\"\r\nimport { Container, Row, Spinner } from \"react-bootstrap\"\r\nimport { get } from \"../../Services/RequestService\"\r\nimport HistoryDetails from \"./HistoryDetails\"\r\n\r\nconst URI = \"/api/web/v1.0/auth/history\"\r\n\r\nconst History = () => {\r\n\r\n    const [history, setHistory] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        return get(URI, setHistory, setError)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (history || error) setLoading(false)\r\n    }, [history, error])\r\n\r\n    let content = <h3>You don't have a history</h3>\r\n    \r\n    if(loading === true) {\r\n        content = <Spinner animation=\"border\" role=\"status\"><span className=\"visually-hidden\">Loading...</span></Spinner>\r\n    }\r\n\r\n    if(error !== null) {\r\n        content = <h3>An error had occured</h3>\r\n    }\r\n\r\n    if(history !== null && history.entities.length !== 0) {\r\n        content = history.entities.map(item => <HistoryDetails key={item.fields[0].value} item={item}/>)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Container>\r\n                <Row>\r\n                    <h1>History</h1>\r\n                </Row>\r\n            </Container>\r\n            <Container className={\"d-flex justify-content-center\"}>\r\n                <Row>\r\n                    {content}\r\n                </Row>\r\n            </Container>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default History","import React, {Fragment, useReducer, useState} from \"react\";\r\nimport {Button, Form, FormControl, FormLabel, InputGroup, Modal} from \"react-bootstrap\";\r\n\r\nexport const QuizAnswerModal = (props) => {\r\n\r\n    const hasAnswer = () => props.answer !== undefined\r\n\r\n    const [validated, setValidated] = useState(false)\r\n\r\n    const [answer, setAnswer] = useState(!hasAnswer() || props.answer.answer === undefined\r\n        ? null : props.answer.answer)\r\n    const [answerChoice, setAnswerChoice] = useState(!hasAnswer() || props.answer.answerNumber === undefined\r\n        ? null : props.answer.answerNumber)\r\n\r\n\r\n    const MultiChoiceView = (choice, index) => (\r\n        <Fragment>\r\n            <InputGroup className=\"mb-3\">\r\n                <InputGroup.Radio name=\"answer\"\r\n                                  checked={index === answerChoice}\r\n                                  onChange={() => setAnswerChoice(index)}/>\r\n                <FormLabel className=\"ms-3\">{choice.choiceAnswer}</FormLabel>\r\n            </InputGroup>\r\n        </Fragment>\r\n    )\r\n\r\n    const ShortView = () => (\r\n        <Fragment>\r\n            <InputGroup className=\"mb-3\">\r\n                <FormControl\r\n                    key={\"short_answer\"}\r\n                    placeholder=\"Write a short answer here\"\r\n                    aria-label=\"Order in session\"\r\n                    aria-describedby=\"order\"\r\n                    type=\"text\"\r\n                    value={answer}\r\n                    onChange={(e) => setAnswer(e.target.value)}\r\n                />\r\n            </InputGroup>\r\n        </Fragment>\r\n    )\r\n\r\n\r\n    const LongView = () => (\r\n        <Fragment>\r\n            <InputGroup className=\"mb-3\">\r\n                <FormControl\r\n                    as=\"textarea\" rows={5}\r\n                    key={\"long_answer\"}\r\n                    placeholder=\"Write your answer here\"\r\n                    aria-label=\"Order in session\"\r\n                    aria-describedby=\"order\"\r\n                    type=\"text\"\r\n                    value={answer}\r\n                    onChange={setAnswer}\r\n                />\r\n            </InputGroup>\r\n        </Fragment>\r\n    )\r\n\r\n\r\n    const handleClose = () => props.handleClose()\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n        event.preventDefault();\r\n        if (form.checkValidity() === false) {\r\n            event.stopPropagation();\r\n        } else {\r\n\r\n            const ans = {\r\n                sessionId: props.data.sessionId,\r\n                quizId: props.data.id,\r\n                answer: answer,\r\n                answerChoice: answerChoice\r\n            }\r\n            props.saveAnswer(ans)\r\n        }\r\n        setValidated(true)\r\n    };\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                <Modal.Header closeButton onClick={handleClose}>\r\n                    <Modal.Title>{props.data.question}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {props.data.answerType === \"MULTIPLE_CHOICE\" && props.data.answerChoices.map((c, index) => MultiChoiceView(c, index))}\r\n                    {props.data.answerType === \"SHORT\" && ShortView()}\r\n                    {props.data.answerType === \"LONG\" && LongView()}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n                    {!props.readOnly && <Button variant=\"primary\" type=\"submit\">Save</Button>}\r\n                </Modal.Footer>\r\n            </Form>\r\n        </Fragment>\r\n    )\r\n}","import {Card, FloatingLabel, Form, ListGroup, Modal, ProgressBar} from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport React, {cloneElement, Fragment, useEffect, useState} from \"react\";\r\nimport {QuizAnswerModal} from \"../Quizzes/QuizAnswerModal\";\r\nimport {goPOST} from \"../../Services/FetchService\";\r\nimport SockJsClient from \"react-stomp\";\r\n\r\n\r\nexport const QuizAnswerCardInSession = (props) => {\r\n    const [show, setShow] = useState(false)\r\n    /**/const [client, setClient] = useState(null)\r\n\r\n    const handleClick = () => {\r\n        setShow(true)\r\n    }\r\n    const handleClose = () => setShow(false)\r\n    const hasAnswer = () => props.answer !== undefined &&\r\n        (props.answer.answer !== undefined && props.answer.answer !== null\r\n            || props.answer.answerNumber !== undefined && props.answer.answerNumber !== null)\r\n\r\n/*    const sendTestMessage = () => {\r\n        client.sendMessage(`/app/orginsession/${props.data.sessionId}`, JSON.stringify({\r\n            name: 'Test Name',\r\n            message: 'TEst MEssage'\r\n        }));\r\n    }*/\r\n\r\n    const saveAnswer = (answer) => {\r\n\r\n        const error = (error) => {\r\n            console.log(error)\r\n\r\n        }\r\n\r\n        const saved = (data) => {\r\n            console.log(data)\r\n            handleClose()\r\n            props.messageOrganizer()\r\n            props.reloadQuizzes()\r\n            //send message to organizer\r\n        }\r\n        goPOST('/api/web/v1.0/non_auth/give_answer', {...answer, guestId: props.answerId}, saved, error)\r\n    }\r\n\r\n\r\n    return (<Fragment>\r\n        {/*{['md'].map((breakpoint) => (*/}\r\n        <Card style={{width: '16rem'}} className=\"me-3 mb-3\">\r\n            <Card.Title>{props.data.question}</Card.Title>\r\n            <Card.Body>\r\n                <FloatingLabel>{props.data.quizState === 'STARTED' ? \"Opened\" : \"Closed\"}</FloatingLabel>\r\n                <FloatingLabel>{hasAnswer() ? \"Answered\" : \"Not Answered\"}</FloatingLabel>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                {props.data.quizState === 'STARTED' &&\r\n                    <Button variant=\"primary\" onClick={() => setShow(true)}\r\n                            className=\"ms-3 mt-3\">{hasAnswer() ? \"Edit Answer\" : \"Answer\"}</Button>}\r\n                {props.data.quizState === 'CLOSED' &&\r\n                    <Button variant=\"primary\" disabled={!hasAnswer()} onClick={() => setShow(true)}\r\n                            className=\"ms-3 mt-3\">View Answer</Button>}\r\n            </Card.Footer>\r\n        </Card>\r\n\r\n\r\n        <Modal show={show}>\r\n            <QuizAnswerModal data={props.data}\r\n                             answer={props.answer}\r\n                             readOnly={props.data.quizState === 'CLOSED'}\r\n                             handleClose={handleClose}\r\n                             handleModalChanges={handleClick}\r\n                             saveAnswer={saveAnswer}\r\n            />\r\n        </Modal>\r\n\r\n\r\n    </Fragment>)\r\n}","import React, {Fragment, useEffect, useState} from \"react\";\r\nimport {Card, Container, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport SockJsClient from 'react-stomp';\r\nimport {goGET} from \"../../Services/FetchService\";\r\n\r\n\r\nimport {QuizAnswerCardInSession} from \"../Quizzes/QuizAnswerCardInSession\";\r\n\r\nexport const InSession = () => {\r\n    const [answer, setAnswer] = useState(null)\r\n    const [quizzes, setQuizzes] = useState(null)\r\n    const [client, setClient] = useState(null)\r\n    const [wsSourceUrl, setWsSourceUrl] = useState(null)\r\n    const {id} = useParams()\r\n\r\n\r\n\r\n    const getQuizzes = () => {\r\n        const setError = (error) => {\r\n            console.log(`Failed to get session with ID: ${id} with error ${error}`)\r\n        }\r\n        const setQuestionsData = (data) => {\r\n            //const tmp = data.entities.map(e => e.properties)\r\n            setQuizzes(data.entities)\r\n            if(client !== null) {\r\n                console.log(`client: ${client}`)\r\n                console.log(`/topic/insession/${answer.sessionId}`)\r\n                sendMessageToOrganizer()\r\n            }\r\n        }\r\n        console.log(`Get Quizzes AnswerId: ${id}`)\r\n        if(id !== 'iframe.html')\r\n            goGET(`/api/web/v1.0/non_auth/quiz/session/${id}`, setQuestionsData, setError)\r\n    }\r\n    useEffect(() => {\r\n        /*Prevent reset state*/\r\n        const setSessionError = (error) => {\r\n            console.log(`Failed to get session with ID: ${id} with error ${error}`)\r\n        }\r\n\r\n        const getMeSession = (data) => {\r\n            setAnswer(data)\r\n            //sendMessageToOrganizer()\r\n            console.log(data)\r\n        }\r\n        console.log(`Get Session AnswerId: ${id}`)\r\n        setWsSourceUrl( \"/insessionws\") //window.location.protocol + \"//\" + window.location.host +\r\n\r\n        if(id !== 'iframe.html')\r\n            goGET(`/api/web/v1.0/non_auth/answer/${id}`, getMeSession, setSessionError)\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        if(client !== null) {\r\n            console.log(`client: ${client}`)\r\n            console.log(`/topic/insession/${answer.sessionId}`)\r\n            sendMessageToOrganizer()\r\n        }\r\n        getQuizzes()\r\n    }, [answer])\r\n\r\n/*    useEffect(() => {\r\n        if(client !== null) {\r\n            console.log(`client: ${client}`)\r\n            console.log(`/topic/insession/${answer.sessionId}`)\r\n            //sendMessageToOrganizer()\r\n        }\r\n    }, [client])*/\r\n\r\n    const getQuizAnswer = (id) => answer.answers.find(a => a.quizId === id)\r\n\r\n    const sendMessageToOrganizer = () => {\r\n\r\n        client.sendMessage(`/queue/insession/${answer.sessionId}`, JSON.stringify({\r\n            name: 'Participant',\r\n            message: 'Joined Session - New/updated answer'\r\n        }));\r\n    }\r\n\r\n    return (\r\n\r\n        <Fragment>\r\n            <h1 className={\"text-center mb-5 mt-3\"}>Participant: {id}</h1>\r\n            <Container>\r\n                <Row>\r\n                    {quizzes !== null && quizzes.length > 0 && answer !== null && (\r\n                        quizzes.map(q => <QuizAnswerCardInSession key={q.properties.id}\r\n                                                                  name={q.properties.question}\r\n                                                                  data={q.properties}\r\n                                                                  quizHref={q.href}\r\n                                                                  reloadQuizzes={getQuizzes}\r\n                                                                  answer={getQuizAnswer(q.properties.id)}\r\n                                                                  answerId={id}\r\n                                                                  messageOrganizer={sendMessageToOrganizer}\r\n                            //sendTestMessage={sendTestMessage}\r\n                        />)\r\n                    )}\r\n                </Row>\r\n            </Container>\r\n\r\n\r\n            {answer !== null && wsSourceUrl !== null && <SockJsClient url= {`${wsSourceUrl}`}\r\n                                              topics={[`/topic/insession/${answer.sessionId}`]}\r\n                                              onConnect={() => {\r\n                                                  console.log(\"connected\");\r\n                                              }}\r\n                                              onDisconnect={() => {\r\n                                                  console.log(\"Disconnected\");\r\n                                              }}\r\n                                              onMessage={(msg) => {\r\n                                                  {/*need to add validation here*/}\r\n                                                  console.log(`gotta message`)\r\n                                                  console.log(msg)\r\n                                                  if(msg.name === 'Organizer')\r\n                                                    getQuizzes()\r\n                                              }}\r\n                                              ref={(client) => setClient(client)\r\n                                              } />\r\n            }\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n\r\n","import {Form, ListGroup, Modal, ProgressBar} from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport React, {Fragment, useEffect, useState} from \"react\";\r\nimport {CreateEditQuizModal} from \"./CreateEditQuizModal\";\r\nimport {goDEL, goPOST} from \"../../Services/FetchService\";\r\n\r\n\r\nexport const QuizCardInSession = (props) => {\r\n    const [show, setShow] = useState(false)\r\n    const [dataForEdit, setDataForEdit] = useState(null)\r\n    const [status, setStatus] = useState(props.data.quizState)\r\n    const [ans, setAns] = useState(null)\r\n    const [showAns, setShowAns] = useState(false)\r\n\r\n    /*    useEffect(() => {\r\n            console.log(props.answers)\r\n        }, [ans])*/\r\n    const handleClick = () => {\r\n        /*props.openSession(props.name, props.link)*/\r\n        console.log(`Data in Quiz Card: ${props.data}`)\r\n        setDataForEdit(props.data)\r\n        setShow(true)\r\n    }\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        setDataForEdit(null)\r\n    }\r\n\r\n    const updateQuizHandler = (id, quiz) => {\r\n\r\n        const setError = (error) => error !== null ? console.log(`Error Updating Quiz: ${id} with error ${error} `) : null\r\n        const setData = (data) => {\r\n            handleClose()\r\n            props.sendMessageToParticipants()\r\n            props.reloadQuizzes()\r\n        }\r\n        goPOST(props.quizHref, quiz, setData, setError, 'PUT')\r\n    }\r\n\r\n    const removeQuiz = (id) => {\r\n        const setError = (error) => {\r\n            console.log(`Error Deleting Quiz: ${id} with error ${error} `)\r\n        }\r\n        const setData = (data) => {\r\n            console.log(`Deleted Quiz ${id} Successfully!! Response: ${data}`)\r\n            props.reloadQuizzes()\r\n        }\r\n        console.log(`Quiz Self: ${props.quizHref}`)\r\n        goDEL(props.quizHref, setData, setError)\r\n    }\r\n\r\n    const updateStatus = (newStatus) => {\r\n\r\n        const toUpdate = {\r\n            quizState: newStatus,\r\n        }\r\n        const setError = (error) => {\r\n            if (error !== null) console.log(`Error Updating Quiz: ${props.data.id} with error ${error} `)\r\n        }\r\n        const setData = (data) => {\r\n            if (data !== null) {\r\n                console.log(`Updated Quiz ${props.data.id} Successfully!! Response: ${data}`)\r\n                setStatus(newStatus)\r\n                props.sendMessageToParticipants()\r\n            }\r\n        }\r\n        goPOST(`${props.quizHref}/updatestatus`, toUpdate, setData, setError, 'PUT')\r\n    }\r\n\r\n    const getMultiChoiceView = () => {\r\n        const stats = new Array(props.data.answerChoices.length).fill(0);\r\n        props.answers.forEach((ans) => stats[ans.answerNumber] += 1)\r\n\r\n        const content = props.data.answerChoices.map((choice, idx) => {\r\n            let color = \"danger\"\r\n            if (choice.choiceRight) color = \"success\"\r\n\r\n            return (\r\n                <ListGroup variant=\"flush\">\r\n                    <ListGroup.Item key={idx}>\r\n                        <div className={\"bg-light d-flex justify-content-between\"}>\r\n                            <p>{choice.choiceAnswer}</p>\r\n                            <p>{stats[choice.choiceNumber] + ' of ' + props.answers.length}</p>\r\n                        </div>\r\n                        <ProgressBar variant={color} now={(stats[choice.choiceNumber] / props.answers.length) * 100}/>\r\n                    </ListGroup.Item>\r\n                </ListGroup>)\r\n        })\r\n        return content\r\n    }\r\n\r\n    const getAnswers = () => (\r\n        <Fragment>\r\n            {props.data.answerType === 'MULTIPLE_CHOICE' && getMultiChoiceView()}\r\n            {props.data.answerType !== 'MULTIPLE_CHOICE' &&\r\n                props.answers.map((a, i) =>\r\n                    <ListGroup horizontal>\r\n                        <ListGroup.Item className=\"col-1 ms-3\">{i + 1}</ListGroup.Item>\r\n                        <ListGroup.Item className=\"col-11\">{a.answer}</ListGroup.Item>\r\n                    </ListGroup>\r\n                )\r\n            }\r\n        </Fragment>\r\n    )\r\n\r\n\r\n    return (<Fragment>\r\n        {/*{['md'].map((breakpoint) => (*/}\r\n\r\n        <ListGroup horizontal>\r\n            <ListGroup.Item className=\"col-4\">{props.data.question}</ListGroup.Item>\r\n            <ListGroup.Item className=\"col-3\">{props.data.answerType}</ListGroup.Item>\r\n            <ListGroup.Item className=\"col-1\">{props.data.order}</ListGroup.Item>\r\n            <ListGroup.Item>Answers: {props.answers.length} </ListGroup.Item>\r\n            <ListGroup.Item className=\"col-2\">\r\n                <Form.Select value={status}\r\n                             onChange={(e) => updateStatus(e.target.value)}>\r\n                    <option value='NOT_STARTED'>Not Started</option>\r\n                    <option value='STARTED'>Started</option>\r\n                    <option value='CLOSED'>Closed</option>\r\n                </Form.Select>\r\n            </ListGroup.Item>\r\n            {status === 'NOT_STARTED' &&\r\n                <ListGroup.Item>\r\n                    <Button variant=\"primary\" onClick={handleClick}>\r\n                        Edit\r\n                    </Button>\r\n                </ListGroup.Item>}\r\n            {status === 'NOT_STARTED' && <ListGroup.Item>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={() => removeQuiz(props.data.id)}>\r\n                    Remove\r\n                </Button>\r\n            </ListGroup.Item>\r\n            }\r\n            {status !== 'NOT_STARTED' && <ListGroup.Item>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={() => setShowAns( sa => !sa)}>\r\n                    Answers\r\n                </Button>\r\n            </ListGroup.Item>\r\n            }\r\n        </ListGroup>\r\n        {props.answers.length > 0 && showAns && getAnswers(props.data.id)}\r\n        <Modal show={show}>\r\n            <CreateEditQuizModal data={dataForEdit}\r\n                                 handleClose={handleClose}\r\n                                 handleModalChanges={handleClick}\r\n                                 updateQuiz={updateQuizHandler}/>\r\n        </Modal>\r\n    </Fragment>)\r\n}","import React, {Fragment, useEffect, useState} from \"react\";\r\nimport {Card, Container, Modal, Row} from \"react-bootstrap\";\r\nimport {SessionForm} from \"./SessionForm\";\r\nimport {QuizCard} from \"../Quizzes/QuizCard\";\r\nimport {CreateEditQuizModal} from \"../Quizzes/CreateEditQuizModal\";\r\nimport {goGET, goPOST} from \"../../Services/FetchService\";\r\nimport {useParams} from \"react-router\";\r\nimport {getActionHref, getLinksHref} from \"../../Services/SirenService\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {QuizCardInSession} from \"../Quizzes/QuizCardInSession\";\r\nimport SockJsClient from 'react-stomp';\r\n\r\n/* register websocket */\r\n\r\n\r\nexport const InSessionOrg = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [session, setSession] = useState(null)\r\n    const [quizzes, setQuizzes] = useState(null)\r\n    const [answers, setAnswers] = useState(null)\r\n    const [numberParticipants, setNumberParticipants] = useState(0)\r\n    const [quizzesLinks, setQuizzesLinks] = useState(null)\r\n    const [show, setShow] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const [title, setTitle] = useState(null)\r\n    const [guestCode, setGuestCode] = useState(null)\r\n    const [client, setClient] = useState(null)\r\n    const [wsSourceUrl, setWsSourceUrl] = useState(null)\r\n    const {id} = useParams()\r\n\r\n    useEffect(() => {\r\n        /*Prevent reset state*/\r\n        const setSessionError = (error) => {\r\n            if (error !== null) {\r\n                console.log(`Failed to get session with ID: ${id} with error ${error}`)\r\n                setError(error)\r\n            }\r\n        }\r\n        const getMeSession = (data) => {\r\n            setSession(data)\r\n        }\r\n        /* console.log(`Session Id: ${id}`)*/\r\n        setWsSourceUrl(\"/insessionws\") //window.location.protocol + \"//\" + window.location.host +\r\n        goGET(`/api/web/v1.0/auth/sessions/${id}`, getMeSession, setSessionError)\r\n\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        if (session !== null) {\r\n            console.log('ws endpoint')\r\n            console.log(wsSourceUrl)\r\n            setTitle(session.properties.name)\r\n            setGuestCode(session.properties.guestCode)\r\n            getQuizzes()\r\n            getAnswers()\r\n\r\n        }\r\n    }, [session])\r\n\r\n    const getQuizzes = () => {\r\n        const setError = (error) => {\r\n            if (error !== null)\r\n                alert(`Failed to retrieve Session from ${getLinksHref(session.links, \"related\")} with error ${error}`)\r\n        }\r\n\r\n        const compareOrder = (a, b) => {\r\n            if (a < b) return -1\r\n            if (a > b) return 1\r\n            return 0\r\n        }\r\n\r\n        const setData = (data) => {\r\n            if (data) {\r\n                const quizList = data.entities.map(e => e)\r\n                const t = quizList.sort((a, b) => compareOrder(a.properties.order, b.properties.order))\r\n                setQuizzes(t)\r\n            }\r\n        }\r\n        goGET(getLinksHref(session.links, \"related\", 'Quizzes'), setData, setError)\r\n    }\r\n\r\n    const getAnswers = () => {\r\n        const setError = (error) => {\r\n            if (error !== null)\r\n                alert(`Failed to retrieve Session from ${getLinksHref(session.links, \"related\")} with error ${error}`)\r\n        }\r\n\r\n        const setData = (data) => {\r\n            if (data) {\r\n                setNumberParticipants(data.properties.total)\r\n                setAnswers(data.entities)\r\n            }\r\n        }\r\n        goGET(getLinksHref(session.links, \"related\", 'Answers'), setData, setError)\r\n    }\r\n\r\n\r\n    const newQuiz = () => {\r\n        setShow(true)\r\n    }\r\n    const handleClose = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const newButton = () => (\r\n        <Button className=\"btn btn-success mb-3 mt-3\" type=\"submit\"\r\n                onClick={newQuiz}> Add Quiz\r\n        </Button>\r\n    )\r\n\r\n    const createQuizHandler = (quiz) => {\r\n        const setError = (error) => error !== null ? console.log(`Error Creating with error ${error} `) : null\r\n        const setData = (data) => {\r\n            console.log(`Created Quiz Successfully!! Response: ${data}`)\r\n            handleClose()\r\n            if (quiz.status === 'STARTED')\r\n                sendMessageToParticipants()\r\n            getQuizzes()\r\n        }\r\n        const apiLink = session.actions.find(a => a.name === 'Add-Quiz').href\r\n        goPOST(apiLink, quiz, setData, setError)\r\n\r\n    }\r\n\r\n    const updateSessionHandler = (updatedSession) => {\r\n        setLoading(true)\r\n        const setError = (error) => {\r\n            if (error !== null)\r\n                alert(`Failed to update Session from ${updatedSession} with error ${error}`)\r\n        }\r\n\r\n        const apiLink = getActionHref(session.actions, 'Update-Session')\r\n        goPOST(apiLink, updatedSession, null, setError, 'PUT', setLoading)\r\n    }\r\n\r\n    const getQuizAnswers = (id) => {\r\n        const ans = [];\r\n        if (answers != null && answers[0] != null) {\r\n            answers.forEach(aw =>\r\n                aw.properties.answers.forEach(a => {\r\n                    if (a.quizId === id) {\r\n                        ans.push(a)\r\n                    }\r\n                })\r\n            )\r\n        }\r\n        return ans\r\n    }\r\n\r\n    const sendMessageToParticipants = () => {\r\n        client.sendMessage(`/topic/insession/${id}`, JSON.stringify({\r\n            name: 'Organizer',\r\n            message: 'New/Updated Quizz'\r\n        }));\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Container>\r\n                <Row>\r\n                    <Card className={\"mt-3\"}>\r\n                        <Card.Title>{title} - Session Code: {guestCode} - Number of\r\n                            Participants: {numberParticipants}</Card.Title>\r\n                    </Card>\r\n                </Row>\r\n            </Container>\r\n            {/******************** if there are quizzes *********************************/}\r\n\r\n            <Container>\r\n                <Row>\r\n                    {newButton()}\r\n                </Row>\r\n            </Container>\r\n            <Container>\r\n                <Row>\r\n                    {quizzes !== null && quizzes.length > 0 && (\r\n                        quizzes.map(q => <QuizCardInSession key={q.properties.id}\r\n                                                            name={q.properties.question}\r\n                                                            data={q.properties}\r\n                                                            quizHref={q.href}\r\n                                                            reloadQuizzes={getQuizzes}\r\n                                                            answers={getQuizAnswers(q.properties.id)}\r\n                                                            sendMessageToParticipants={sendMessageToParticipants}\r\n                        />)\r\n                    )}\r\n                </Row>\r\n            </Container>\r\n\r\n            <Modal show={show}>\r\n                <CreateEditQuizModal handleClose={handleClose} createQuiz={createQuizHandler}/>\r\n            </Modal>\r\n\r\n            {session !== null && wsSourceUrl !== null && <SockJsClient url={`${wsSourceUrl}`}\r\n                                               topics={[`/queue/insession/${id}`]}\r\n                                               onConnect={() => {\r\n                                                   console.log(\"connected\");\r\n                                                   console.log(`/queue/insession/${id}`)\r\n                                               }}\r\n                                               onDisconnect={() => {\r\n                                                   console.log(\"Disconnected\");\r\n                                               }}\r\n                                               onMessage={(msg) => {\r\n                                                   console.log(msg);\r\n                                                   getAnswers()\r\n                                               }}\r\n                                               ref={(client) => {\r\n                                                   setClient(client)\r\n\r\n                                               }}/>}\r\n        </Fragment>\r\n    )\r\n}","import React, {useContext, useEffect} from \"react\";\r\nimport './App.css';\r\nimport {LogMeIn} from \"./Components/LogMeIn\";\r\nimport {UserContext, UserContextProvider} from \"./Components/UserContextProvider\";\r\nimport {HomeComponent} from \"./Components/HomeComponent\";\r\nimport {RegisterUser} from \"./Components/RegisterUser\";\r\nimport {LoginUser} from \"./Components/LoginUser\";\r\nimport {BrowserRouter as Router, Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {NavBarComponent} from \"./Components/NavBarComponent\";\r\nimport {Templates} from \"./Components/Templates/Templates\";\r\nimport {Sessions} from \"./Components/Sessions/Sessions\";\r\nimport {Session} from \"./Components/Sessions/Session\";\r\nimport History from \"./Components/History/HistoryPage\";\r\nimport {InSession} from \"./Components/Sessions/InSessionComponent\";\r\nimport {InSessionOrg} from \"./Components/Sessions/InSessionOrg\";\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    //var stompClient = require('./Utils/websocket-listener')\r\n    const userContext = useContext(UserContext)\r\n\r\n   // const isLoggedIn = () => userContext.userName !== null && userContext.isLoading === false\r\n\r\n    return (\r\n            <UserContextProvider>\r\n                <Router>\r\n                    <div>\r\n                        <NavBarComponent />\r\n                        <Routes>\r\n                            {/**No auth needed**/}\r\n                            <Route path=\"/\" element={<HomeComponent/>}/>\r\n                            <Route path=\"/register\" element={<RegisterUser/>}/>\r\n                            <Route path=\"/login\" element={<LoginUser/>}/>\r\n                            <Route path=\"/logmein\" element={<LogMeIn/>}/>\r\n                            <Route path=\"/insession/:id\" element={<InSession/>}/>\r\n                             {/**auth needed**/}\r\n                            <Route path=\"/sessions\" element={<Sessions/>}/>\r\n                            <Route path=\"/sessions/:id\" element={<Session/>}/>\r\n                            <Route path=\"/owninsession/:id\" element={<InSessionOrg/>}/>\r\n                            <Route path=\"/templates\" element={<Templates/>}/>\r\n                            <Route path=\"/history\" element={<History />} />\r\n\r\n                        </Routes>\r\n                    </div>\r\n                </Router>\r\n            </UserContextProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n // <React.StrictMode>\r\n    <App />\r\n // </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","module.exports = {\r\n\r\n    SessionDTO: function Session(name, description, limitOfParticipants, geolocation, templateId) {\r\n            this.name =\tname\r\n            this.description = description\r\n            this.limitOfParticipants = limitOfParticipants\r\n            this.geolocation = geolocation\r\n            this.templateId = templateId\r\n    }\r\n}\r\n\r\n/*\r\ndata class SessionInputModel(\r\n    val name: String,\r\n    val description: String? = null,\r\n    val limitOfParticipants: Int?,\r\n    val geolocation: String?,\r\n    val templateId: String? = null\r\n)*/\r\n"],"sourceRoot":""}